[tool.poetry]
name = "testing-exercises"
version = "0.1.0"
description = ""
authors = ["Octopulus96 <octopulus96@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.12.0"
pytest = "7.2.1"
pytest-cov = "^5.0.0"
faker = "^24.4.0"
mypy = "^1.9.0"
pre-commit = "^3.7.0"
pylint = "^3.1.0"
pylint-pytest = "^1.1.7"
pytest-mypy = "^0.10.3"
pytest-mypy-testing = "^0.1.3"
black = "^24.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "--cov=functions --cov-report=xml:cov.xml --cov-fail-under=20 --cov-report=term"
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
no_implicit_optional = true
strict_optional = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = "functions.*"
disable_error_code = ["return-value", "assignment", "var-annotated", "no-any-return"]
ignore_missing_imports = true

[tool.pylint]
py-version = "3.12"
load-plugins = ["pylint_pytest"]
targets = [
    "tests/"
]
disable = [
    "missing-docstring",
    "invalid-name",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "ignore-imports",
    "redefined-outer-name",
    "unrecognized-option",
    "unknown-option-value",
    "no-redef"
]
class-rgx = '[A-Z][a-z]+'
function-rgx = '[a-z_][a-z0-9_]{2,30}$'
min-coverage = 50

[tool.black]
line-length = 105
target-version = ['py312']
include = '\.(py|md|rst|toml|yml|yaml)$'
exclude = '''
/(
     .eggs         # exclude a few common directories in the
    |.git          # root of the project
    |.hg
    |.mypy_cache
    |.tox
    |venv
    |_build
    |buck-out
    |build
    |dist
  )/
'''
unstable = true
